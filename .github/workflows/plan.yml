name: terraform-plan

on:
  # pull_request:
  #   branches:
  #     - main

  # This is used to indicate that a workflow 
  # can be called by another workflow.
  workflow_call:
    # inputs:
    #   environment:
    #     description: 'The environment to deploy to'
    #     required: true
    #     type: string

    secrets:
      ARM_CLIENT_ID:
        required: true
      ARM_TENANT_ID:
        required: true
      ARM_SUBSCRIPTION_ID:
        required: true

env:
  TF_INPUT: false
  RESOURCE_GROUP: 'rg-terraform'
  STORAGE_ACCOUNT: 'stterraformjr'
  CONTAINER_NAME: 'tfstate'

permissions:
  issues: write
  pull-requests: write
  contents: read
  id-token: write

jobs:
  plan:
    runs-on: ubuntu-latest
    env: 
      # environment: ${{ github.event.inputs.environment }}
      environment: 'dev'

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4

      # Install the selected version of Terraform CLI 
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.0

      - name: Log in to Azure
        uses: Azure/login@v1
        with:
          client-id: ${{ secrets.ARM_CLIENT_ID }}
          tenant-id: ${{ secrets.ARM_TENANT_ID }}
          subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        id: init
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          RESOURCE_GROUP: ${{ env.RESOURCE_GROUP }}
          STORAGE_ACCOUNT: ${{ env.STORAGE_ACCOUNT }}
          CONTAINER_NAME: ${{ env.CONTAINER_NAME }}
          # environment: ${{ inputs.environment }}
          # environment: ${{ github.event.inputs.environment }}
          environment: 'dev'
        run: |
          terraform init \
            -backend-config="storage_account_name=$STORAGE_ACCOUNT" \
            -backend-config="container_name=$CONTAINER_NAME" \
            -backend-config="resource_group_name=$RESOURCE_GROUP" \
            -backend-config="key=$environment/terraform.tfstate"

      # Run a terraform plan
      - name: Terraform Plan
        id: plan
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          # environment: ${{ inputs.environment }}
          # environment: ${{ github.event.inputs.environment }}
          environment: 'dev'
          
        run: |
          terraform plan \
            -var-file=environments/$environment.tfvars
        continue-on-error: false

      # # Save plan to artifacts  
      # - name: Publish Terraform Plan
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: tfplan
      #     path: tfplan